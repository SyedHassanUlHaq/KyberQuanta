def decode(bits, k):
    """Decode bit array to polynomial coefficients."""
    coefficients = []
    for i in range(len(bits)):
        coefficient = 0
        for j in range(k):
            coefficient += bits[i][j] * (2 ** j)
        coefficients.append(coefficient)
    return coefficients

def coefficients_to_polynomial(coefficients):
    """Convert list of coefficients to polynomial string."""
    terms = []
    for power, coefficient in enumerate(coefficients):
        if coefficient != 0:
            term = f"{coefficient}x^{power}" if power > 0 else f"{coefficient}"
            terms.append(term)
    polynomial = " + ".join(terms[::-1])
    return polynomial

# Example usage
bit_array = [[0, 1, 0, 0, 1, 0, 0, 0],
 [1, 0, 1, 1, 1, 1, 0, 0],
 [0, 0, 1, 1, 1, 1, 1, 0],
 [0, 1, 0, 1, 0, 0, 1, 0],
 [0, 1, 1, 1, 0, 0, 0, 0],
 [1, 0, 1, 0, 1, 1, 0, 1],
 [1, 1, 0, 1, 1, 0, 1, 1],
 [1, 0, 0, 1, 0, 0, 1, 1],
 [0, 0, 1, 0, 1, 0, 0, 0],
 [0, 0, 1, 0, 1, 1, 0, 1],
 [1, 1, 0, 1, 0, 0, 1, 1],
 [0, 1, 0, 0, 1, 0, 1, 0],
 [1, 0, 1, 0, 1, 1, 1, 0],
 [1, 1, 0, 0, 1, 0, 1, 1],
 [0, 0, 1, 0, 1, 1, 1, 1],
 [1, 1, 0, 1, 0, 1, 1, 0],
 [1, 0, 0, 1, 0, 1, 0, 1],
 [0, 0, 1, 0, 0, 1, 1, 0],
 [0, 0, 1, 0, 1, 1, 0, 0],
 [1, 0, 1, 0, 1, 0, 0, 1],
 [1, 1, 1, 0, 0, 1, 0, 0],
 [1, 1, 1, 1, 0, 0, 1, 0],
 [0, 1, 1, 1, 0, 1, 1, 1],
 [1, 0, 1, 0, 0, 0, 1, 1],
 [1, 1, 1, 1, 0, 0, 1, 0],
 [1, 0, 1, 0, 1, 1, 1, 1],
 [0, 0, 0, 0, 0, 1, 0, 1],
 [0, 1, 1, 0, 1, 0, 1, 0],
 [0, 1, 0, 1, 0, 0, 0, 1],
 [0, 0, 1, 0, 1, 1, 0, 1],
 [1, 0, 0, 1, 1, 1, 0, 1],
 [0, 0, 0, 0, 0, 0, 0, 1],
 [1, 1, 0, 0, 1, 0, 0, 0],
 [1, 0, 0, 0, 0, 1, 0, 0],
 [0, 1, 0, 0, 1, 1, 1, 1],
 [1, 0, 1, 1, 1, 0, 1, 1],
 [1, 1, 1, 0, 1, 1, 1, 1],
 [1, 0, 0, 0, 1, 1, 0, 1],
 [1, 0, 1, 0, 0, 0, 1, 0],
 [1, 1, 0, 1, 1, 1, 0, 0],
 [1, 0, 1, 1, 1, 0, 1, 1],
 [1, 0, 0, 0, 0, 0, 0, 1],
 [1, 0, 0, 0, 0, 1, 1, 1],
 [0, 1, 0, 1, 1, 1, 0, 0],
 [1, 0, 0, 0, 0, 1, 1, 1],
 [0, 0, 1, 1, 1, 0, 1, 1],
 [0, 0, 1, 0, 0, 0, 1, 1],
 [0, 1, 1, 0, 1, 0, 1, 1],
 [0, 1, 0, 0, 1, 1, 1, 1],
 [0, 0, 1, 1, 0, 1, 1, 0],
 [1, 0, 0, 1, 0, 0, 0, 1],
 [0, 0, 1, 1, 0, 0, 0, 0],
 [0, 1, 0, 1, 1, 0, 0, 0],
 [0, 0, 0, 1, 1, 1, 0, 0],
 [0, 1, 1, 1, 1, 1, 0, 1],
 [0, 0, 0, 0, 1, 1, 0, 0],
 [1, 1, 0, 0, 0, 1, 0, 0],
 [0, 0, 1, 1, 0, 1, 0, 1],
 [0, 0, 0, 0, 1, 1, 0, 0],
 [1, 1, 0, 1, 1, 1, 1, 1],
 [1, 0, 0, 0, 1, 1, 0, 0],
 [1, 1, 1, 1, 1, 0, 0, 1],
 [1, 1, 0, 1, 0, 1, 1, 1],
 [0, 1, 0, 0, 0, 0, 1, 1],
 [0, 1, 0, 1, 0, 0, 0, 1],
 [1, 1, 0, 0, 1, 0, 0, 1],
 [0, 1, 0, 0, 1, 1, 0, 1],
 [0, 0, 0, 0, 1, 0, 1, 0],
 [0, 0, 1, 1, 0, 0, 1, 1],
 [1, 1, 0, 1, 1, 1, 1, 0],
 [1, 0, 1, 0, 0, 1, 0, 1],
 [1, 0, 1, 1, 0, 1, 1, 1],
 [1, 0, 1, 1, 1, 0, 0, 1],
 [0, 1, 0, 1, 0, 0, 1, 0],
 [1, 1, 1, 0, 0, 0, 0, 0],
 [1, 0, 1, 0, 0, 0, 1, 0],
 [1, 1, 0, 1, 1, 0, 1, 0],
 [1, 1, 1, 0, 0, 0, 0, 0],
 [1, 0, 0, 0, 1, 0, 0, 0],
 [0, 1, 0, 1, 0, 1, 1, 1],
 [0, 1, 1, 1, 1, 1, 0, 0],
 [1, 1, 1, 1, 1, 1, 1, 0],
 [1, 0, 0, 0, 0, 1, 0, 0],
 [0, 1, 1, 1, 1, 0, 1, 1],
 [0, 1, 0, 1, 1, 1, 1, 1],
 [0, 0, 0, 1, 0, 0, 1, 1],
 [1, 1, 0, 0, 1, 1, 1, 0],
 [0, 1, 1, 0, 0, 1, 1, 1],
 [0, 1, 0, 1, 0, 1, 0, 0],
 [1, 0, 1, 1, 0, 0, 1, 0],
 [0, 0, 1, 1, 0, 0, 0, 1],
 [1, 1, 0, 1, 1, 1, 0, 1],
 [0, 0, 0, 1, 0, 0, 0, 1],
 [1, 0, 1, 0, 1, 1, 0, 0],
 [0, 1, 0, 0, 0, 0, 0, 1],
 [1, 0, 0, 1, 1, 0, 0, 1],
 [1, 1, 0, 0, 0, 1, 1, 1],
 [1, 1, 0, 1, 0, 0, 0, 1],
 [0, 1, 1, 0, 0, 0, 0, 1],
 [0, 0, 0, 1, 0, 1, 1, 0],
 [1, 1, 0, 1, 0, 1, 1, 0],
 [1, 1, 1, 1, 1, 1, 0, 0],
 [1, 1, 1, 0, 1, 0, 1, 1],
 [0, 1, 1, 1, 0, 1, 1, 1],
 [0, 0, 0, 1, 0, 0, 0, 0],
 [0, 1, 1, 0, 0, 0, 1, 1],
 [0, 0, 1, 0, 0, 1, 0, 0],
 [0, 1, 0, 1, 1, 1, 1, 1],
 [1, 1, 1, 1, 0, 0, 1, 0],
 [0, 1, 1, 0, 0, 0, 1, 1],
 [1, 1, 0, 1, 1, 0, 0, 1],
 [1, 1, 1, 0, 1, 0, 1, 0],
 [1, 0, 0, 0, 0, 0, 1, 0],
 [0, 1, 1, 1, 1, 0, 1, 0],
 [0, 1, 1, 0, 0, 1, 1, 0],
 [0, 1, 0, 1, 0, 1, 1, 0],
 [1, 1, 0, 0, 0, 0, 0, 0],
 [0, 0, 1, 1, 1, 1, 1, 0],
 [1, 1, 1, 0, 1, 1, 0, 1],
 [1, 0, 0, 1, 1, 0, 0, 0],
 [1, 1, 1, 1, 0, 1, 0, 1],
 [1, 1, 1, 0, 0, 1, 0, 0],
 [1, 0, 1, 0, 1, 1, 1, 0],
 [0, 0, 1, 0, 1, 1, 1, 0],
 [0, 0, 0, 0, 0, 0, 0, 1],
 [1, 1, 1, 0, 0, 1, 1, 1],
 [1, 1, 1, 1, 1, 1, 0, 0],
 [0, 1, 0, 1, 1, 1, 1, 0]]

k = 8  # Number of bits per coefficient
coefficients = decode(bit_array, k)
polynomial = coefficients_to_polynomial(coefficients)
print(polynomial)